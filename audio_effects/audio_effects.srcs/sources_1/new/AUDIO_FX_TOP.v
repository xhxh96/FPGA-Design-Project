`timescale 1ns / 1ps
module AUDIO_FX_TOP(
    input CLK,              // 100MHz FPGA clock
    input SPECIAL_FEATURE,  // Toggles special feature
    
    input [14:0] sw,        // FPGA switches
    input btnU, btnD, btnC, btnR, btnL, // FPGA buttons
    
    output [15:0] led,      // FPGA LEDs
    output [3:0] an,        // FPGA 7-Segment Display Anodes
    output [6:0] seg,       // FPGA 7-Segment Display Cathodes
   
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4     // PmodDA2 serial clock, 50MHz clock
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Instantiate Multiplexer
    // Input for Main Feature
    reg SWITCH_C, SWITCH_D, SWITCH_E, SWITCH_F, SWITCH_G, SWITCH_A, SWITCH_B, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, SWITCH_MIC, SWITCH_DELAY, SWITCH_ALARM, SWITCH_UP, SWITCH_DOWN;
    
    // Inpput and Output for Special Feature
    reg [1:0] HOUR_2; 
    reg [3:0] HOUR_1, MINUTE_2, MINUTE_1;
    reg RESET, SET_TIME, SET_ALARM, STOP_ALARM, START_ALARM;
    
    always @ (posedge CLK) begin
        if (SPECIAL_FEATURE == 0) begin
            SWITCH_MIC = sw[14];
            SWITCH_DELAY = sw[13];
            SWITCH_UP = sw[12];
            SWITCH_DOWN = sw[11];
            
            SWITCH_C = sw[0];
            SWITCH_D = sw[1];
            SWITCH_E = sw[2];
            SWITCH_F = sw[3];
            SWITCH_G = sw[4];
            SWITCH_A = sw[5];
            SWITCH_B = sw[6];
            
            OCTAVE_HIGHER = sw[7];
            SEMITONE_UP = btnU;
            SEMITONE_DOWN = btnD;
            
            SWITCH_ALARM = sw[8];
        end
        else begin
            MINUTE_1 = sw [3:0];
            MINUTE_2 = sw [6:4];
            HOUR_1 = sw [10:7];
            HOUR_2 = sw [12:11];
            
            START_ALARM = sw [14];
            
            SET_TIME = sw [13];
            SET_ALARM = btnU;
            STOP_ALARM = btnD;
            RESET = btnC;
        end 
    end

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k, clk_50M, clk_1s, clk_30k, clk_40k, clk_50k, clk_15k, clk_5k;
      
      slowClock_20k clock_unit1 (CLK, clk_20k);
      slowClock_50M clock_unit2 (CLK, clk_50M);
      slowClock_30k clock_unit3 (CLK, clk_30k);
      slowClock_40k clock_unit4 (CLK, clk_40k);
      slowClock_50k clock_unit5 (CLK, clk_50k);
      slowClock_15k clock_unit6 (CLK, clk_15k);
      slowClock_5k clock_unit7 (CLK, clk_5k);
      slowClock_1s clock_unit8 (CLK, RESET, clk_1s);
      
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
      wire [11:0]MIC_in;
      SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out, c, d, e, f, g, a, b, data_out;
      
      // Piano
      clock_c note_c (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, c);
      clock_d note_d (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, d);
      clock_e note_e (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, e);
      clock_f note_f (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, f);
      clock_g note_g (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, g);
      clock_a note_a (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, a);
      clock_b note_b (CLK, OCTAVE_HIGHER, SEMITONE_UP, SEMITONE_DOWN, b);      
      
      // Delay
      mic_delay delay1 (clk_20k, clk_20k, MIC_in, data_out);
      
      // Pitch shifting
      wire [11:0]data_up;
      wire [11:0]data_down;
      
      pitch_up p_up1 (clk_20k, clk_30k, clk_40k, clk_50k, SEMITONE_UP, SEMITONE_DOWN, MIC_in, data_up);
      pitch_down p_down1 (clk_20k, clk_15k, clk_5k, SEMITONE_UP, SEMITONE_DOWN, MIC_in, data_down);
      
      
      // Alarm
      wire ALARM_OUT; 
      wire [11:0] ALARM_PLAY;
      wire [3:0] SECOND_OUT2, SECOND_OUT1; 
      
      alarm_sound siren (CLK, ALARM_PLAY);
      alarm_clock alarm_unit (CLK, clk_1s, RESET, HOUR_2, HOUR_1, MINUTE_2, MINUTE_1, SET_TIME, SET_ALARM, STOP_ALARM, START_ALARM, ALARM_OUT, an, seg, SECOND_OUT2, SECOND_OUT1);
      
      assign led [15] =  ALARM_OUT;    
      assign led [3:0] = (SPECIAL_FEATURE) ? SECOND_OUT1 : sw[3:0];
      assign led [7:4] = (SPECIAL_FEATURE) ? SECOND_OUT2 : sw[7:4];
      assign led [14:13] = sw[14:13];
      assign led [12:8] = (SPECIAL_FEATURE) ? 0 : sw [12:8]; 
      
      // speaker_out multiplexer
      assign speaker_out = (SWITCH_C == 1) ? c : (SWITCH_D == 1) ? d : (SWITCH_E == 1) ? e : (SWITCH_F == 1) ? f : (SWITCH_G == 1) ? g : (SWITCH_A == 1) ? a : (SWITCH_B == 1) ? b : (SWITCH_MIC == 1) ? MIC_in : (SWITCH_DELAY == 1) ? data_out : (SWITCH_UP == 1) ? data_up : (SWITCH_DOWN == 1) ? data_down : (ALARM_OUT) ? ALARM_PLAY : 0;
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
